from os import rename, listdir, mkdir, rmdir, path, remove, popen
from math import ceil
from time import sleep
from random import randint
from sys import stderr



# Find libs to process
scp_dir = "/gpfswork/rech/yph/uep61bl/scp_data"
libdirs = [x for x in listdir(scp_dir) if path.isdir(path.join(scp_dir, x))]
libnames = []
for name in libdirs:
    tars = [x for x in listdir(path.join(scp_dir, name)) if x.endswith(".tar.gz")]
    if len(tars) > 0:
        libnames.append(name)

# Select one lib
libname=""
if len(libnames) == 0:
    print("Nothing to be done")
else:
    libname = libnames[0]

# Preprocess samples from this lib
samples = [x[:-7] for x in listdir(path.join(scp_dir, name)) if x.endswith(".tar.gz")]

mol_per_fold = 20

# --- Soft versions ---
cuda = "cuda/11.2"
python = "python/3.9.12"


rule all:
    input:
        expand(f"data/{libname}_split/res_{{sample}}/sent.lock", sample=samples)
    params:
        time = "2:00:00",
        job_name="output_Serratus",
        #mem = "20G",
        cpus = "1",
        options = "",
        qos = "qos_cpu-t3",
        partition = "prepost",
        account = "mrb@cpu"
    threads: 1
    

rule unzip_msas:
    input:
        f"{scp_dir}/{{libname}}/{{sample}}.tar.gz"
    output:
        "data/{libname}_split/res_{sample}/aligned.lock"
    priority: 1
    params:
        time = "12:00:00",
        job_name="unzip_Serratus",
        #mem = "20G",
        cpus = "1",
        options = "",
        partition = "prepost",
        qos = "qos_cpu-t3",
        account = "mrb@cpu"
    threads: 1
    run:
        shell("mkdir -p data/{wildcards.libname}_split/ && mv {input} data/{wildcards.libname}_split/")
        shell("cd data/{wildcards.libname}_split/ && tar -xzkf {wildcards.sample}.tar.gz && rm {wildcards.sample}.tar.gz && cd -")


rule folding_split:
    input:
        "data/{libname}_split/res_{sample}/aligned.lock"
    output:
        mol_ready = dynamic("data/{libname}_split/res_{sample}/fold_split/split_{idx}/ready.lock")
    priority: 7
    params:
        time = "12:00:00",
        job_name="splitdata_Serratus",
        #mem = "20G",
        cpus = "1",
        options = "",
        partition = "prepost",
        qos = "qos_cpu-t3",
        account = "mrb@cpu"
    threads: 1
    run:
        split_num = 0
        num_moved = 0
        fold_dir = f"data/{wildcards.libname}_split/res_{wildcards.sample}/fold_split"
        if not path.exists(fold_dir):
            mkdir(fold_dir)

        a3ms = [f for f in listdir(f"data/{wildcards.libname}_split/res_{wildcards.sample}") if f.endswith("a3m")]
        for f in a3ms:
            dirname = path.join(fold_dir, f"split_{split_num}/")
            # Create new bucket
            if num_moved == 0 and split_num != 0:
                mkdir(dirname)
            # Move file into the current bucket
            rename(
                f"data/{wildcards.libname}_split/res_{wildcards.sample}/" + f,
                path.join(dirname, f)
            )

            # Update the numbers
            num_moved += 1
            if num_moved == mol_per_fold:
                if split_num != 0:
                    shell(f"touch {path.join(dirname, 'ready.lock')}")
                num_moved = 0
                split_num += 1
        if num_moved != 0:
            shell(f"touch data/{wildcards.libname}_split/res_{wildcards.sample}/fold_split/split_{split_num}/ready.lock")


rule fold:
    input:
        "data/{libname}_split/res_{sample}/fold_split/split_{idx}/ready.lock",
    output:
        "data/{libname}_split/res_{sample}/fold_split/split_{idx}/folded.lock"
    priority: 8
    params:
        time = f"{min(20, mol_per_fold)}:00:00",
        job_name="folding_Serratus",
        #mem = "20G",
        cpus = "1",
        options = "--gres=gpu:1",
        partition = "gpu_p13",
        qos = "qos_gpu-t3",
        account = "mrb@v100"
    resources:
        gpu = 1
    threads: 1
    run:
        # Fold proteins
        folding_dir = str(output)[:str(output).rfind('/')]
        shell(f"module load {python} {cuda} && colabfold_batch --stop-at-score 85 {folding_dir} {folding_dir}")
        shell(f"cd {folding_dir} && rm -f cite.bibtex config.json *.png *_rank_[2-5]_* *_error_* *.done.txt && cd -")
        shell("touch {output}")



rule compress_sample:
    input:
        dynamic("data/{libname}_split/res_{sample}/fold_split/split_{idx}/folded.lock")
    output:
        "data/{libname}_split/res_{sample}/{libname}-{sample}.tar.gz"
    priority: 9
    params:
        time = "20:00:00",
        job_name="compress_Serratus",
        #mem = "50G",
        cpus = "1",
        options = "--ntasks=1 --cpus-per-task=1 --hint=nomultithread",
        partition = "prepost",
        qos = "qos_cpu-t3",
        account = "mrb@cpu"
    threads: 1
    run:
        sample_dir = path.join("data", f"{wildcards.libname}_split", f"res_{wildcards.sample}", "fold_split")
        sample_compress_dir = path.join("data", f"{wildcards.libname}_split", f"res_{wildcards.sample}", "molecules")
        if not path.exists(sample_compress_dir):
            mkdir(sample_compress_dir)

        for split_dir in [f for f in listdir(sample_dir) if path.isdir(path.join(sample_dir, f))]:
            split_dir = path.join(sample_dir, split_dir)

            # Remove subdirs from previous failed exec
            subdirs = [d for d in listdir(split_dir) if path.isdir(path.join(split_dir, d))]
            for d in subdirs:
                for f in listdir(path.join(split_dir, d)):
                    rename(path.join(split_dir, d, f), path.join(split_dir, f))
                rmdir(path.join(split_dir, d))

            # list molecules
            molecules = [f for f in listdir(split_dir) if f.endswith("a3m")]

            realigned = False
            while not realigned:
                # Realign molecules
                print(split_dir)
                shell(f"module load {python} && python3 palmfold/palmfold.py -p palmfold/pol/ -t 0 -d {split_dir}")
                realigned = True
                # verify realign
                for mol in molecules:
                    name = mol[:-4]
                    if not path.exists(path.join(split_dir, f"{name}.tm")):
                        print(f"{name}.tm not found after realign. Retry...", file=stderr)
                        realigned = False

            # Compress by molecule
            for mol_file in [f for f in listdir(split_dir) if f.endswith("a3m")]:
                # Create 1 dir per molecule
                mol_name = mol_file[:mol_file.rfind(".")]
                mol_dir = path.join(split_dir, f"{wildcards.sample}-{mol_name}")
                if not path.exists(mol_dir):
                    mkdir(mol_dir)
                # Move usefull files into the corresponding dir
                a3m_file = path.join(split_dir, f"{mol_name}.a3m")
                if path.exists(a3m_file):
                    rename(path.join(split_dir, f"{mol_name}.a3m"), path.join(mol_dir, f"{mol_name}.a3m"))
                tm_file = path.join(split_dir, f"{mol_name}.tm")
                if path.exists(tm_file):
                    rename(path.join(split_dir, f"{mol_name}.tm"), path.join(mol_dir, f"{mol_name}.tm"))
                for file in [f for f in listdir(split_dir) if f.startswith(mol_name) and "_rank_1_" in f]:
                    rename(path.join(split_dir, file), path.join(mol_dir, file))
            # Compress mol dirs
            for mol_dir in [d for d in listdir(split_dir) if path.isdir(path.join(split_dir, d)) and '-' in d]:
                mol_name = mol_dir[mol_dir.rfind('-') + 1:]
                tar_file = f"{wildcards.sample}-{mol_name}.tar.gz"
                shell(f"cd {split_dir} && tar -czf {tar_file} {mol_dir} --remove-files && mv {tar_file} ../../molecules/ && cd - > /dev/null")

        # Compress full sample
        res_dir = path.join("data", f"{wildcards.libname}_split", f"res_{wildcards.sample}")
        tar_file = f"{wildcards.libname}-{wildcards.sample}.tar.gz"
        shell(f"cd {res_dir} && tar -czf {tar_file} molecules --remove-files && cd -")
        shell(f"rm -rf {path.join(res_dir, 'aligned.lock')} {path.join(res_dir, 'fold_split')}")



rule s3_upload:
    input:
        "data/{libname}_split/res_{sample}/{libname}-{sample}.tar.gz"
    output:
        "data/{libname}_split/res_{sample}/sent.lock"
    priority: 10
    params:
        time = "20:00:00",
        job_name="compress_Serratus",
        cpus = "1",
        options = "--ntasks=1 --cpus-per-task=1 --hint=nomultithread",
        partition = "prepost",
        qos = "qos_cpu-t3",
        account = "mrb@cpu"
    threads: 1
    run:
        # Test cmd
        shell("cp {input} $WORK/results/ && rm {input} && touch {output}")
        # production cmd
        # shell("/gpfswork/rech/yph/uep61bl/software/aws/dist/aws s3 cp {input} s3://serratus-fold/{wildcards.libname}/{wildcards.libname}-{wildcards.sample}.tar.gz && rm {input} && touch {output}")
